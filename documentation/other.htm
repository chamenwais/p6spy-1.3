<html><!-- #BeginTemplate "/Templates/spydocs.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>P6Spy Documentation</title>

<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF">
<table width="100%" border="0" bgcolor="black">
<tr>
<td>
<img src="http://www.p6spy.com/documentation/images/header.gif" width="580" height="80"> 
<br> 
<table width="580" border="0">
  <tr> 
    <td width="11%"><a href="http://www.p6spy.com"><img src="http://www.p6spy.com/documentation/images/p6spy_com.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/index.htm"><img src="http://www.p6spy.com/documentation/images/index.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/install.htm"><img src="http://www.p6spy.com/documentation/images/install.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/other.htm#p6log"><img src="http://www.p6spy.com/documentation/images/p6log.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/other.htm#p6outage"><img src="http://www.p6spy.com/documentation/images/p6outage.gif" width="110" height="20" border="0"></a></td>
    <td width="38%">&nbsp;</td>
  </tr>
</table>
</td>
</tr>
</table>
<br>
	<!-- #BeginEditable "body" --> 
<div align="center"> 
  <p><a name="install"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>Configuration 
    and Usage</b></font></p>
  <p>&nbsp;</p>
</div>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b><a name="common"></a></b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>Common 
  Property File Settings</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An example property 
  file follows:</font></p>
<pre><font face="Courier New, Courier, mono" size="2">
#################################################################
# P6Spy Options File #
# See documentation for detailed instructions #
#################################################################

#################################################################
# MODULES #
# #
# Modules provide the P6Spy functionality. If a module, such #
# as module_log is commented out, that functionality will not #
# be available. If it is not commented out (if it is active), #
# the functionality will be active. #
# #
# Values set in Modules cannot be reloaded using the #
# reloadproperties variable. Once they are loaded, they remain #
# in memory until the application is restarted. #
# #
#################################################################

module.log=com.p6spy.engine.logging.P6LogFactory
#module.outage=com.p6spy.engine.outage.P6OutageFactory

#################################################################
# REALDRIVER(s) #
# #
# In your application server configuration file you replace the #
# "real driver" name with com.p6spy.engine.P6SpyDriver. This is #
# where you put the name of your real driver P6Spy can find and #
# register your real driver to do the database work. #
# #
# If your application uses several drivers specify them in #
# realdriver2, realdriver3. See the documentation for more #
# details. #
# #
# Values set in REALDRIVER(s) cannot be reloaded using the #
# reloadproperties variable. Once they are loaded, they remain #
# in memory until the application is restarted. #
# #
#################################################################

# realdriver=org.gjt.mm.mysql.Driver 
realdriver=org.gjt.mm.mysql.Driver
#specifies another driver to use
realdriver2=
#specifies a third driver to use
realdriver3=

################################################################
# P6LOG SPECIFIC PROPERTIES #
################################################################
# no properties currently available

################################################################
# P6OUTAGE SPECIFIC PROPERTIES #
################################################################
# Outage Detection
#
# This feature detects long-running statements that may be indicative of
# a database outage problem. If this feature is turned on, it will log any
# statement that surpasses the configurable time boundary during its execution.
# When this feature is enabled, no other statements are logged except the long
# running statements. The interval property is the boundary time set in seconds.
# For example, if this is set to 2, then any statement requiring at least 2 
# seconds will be logged. Note that the same statement will continue to be logged
# for as long as it executes. So if the interval is set to 2, and the query takes
# 11 seconds, it will be logged 5 times (at the 2, 4, 6, 8, 10 second intervals).
#
# outagedetection=true|false
# outagedetectioninterval=integer time (seconds)
#
outagedetection=false
outagedetectioninterval=

################################################################
# COMMON PROPERTIES #
################################################################

# comma separated list of tables to include
include =
# comma separated list of tables to exclude
exclude =

# sql expression to evaluate if using regex
sqlexpression = 

# filter what is logged
filter=false 

# turn on tracing
autoflush = true

# sets the date format using Java's SimpleDateFormat routine
dateformat=

#list of categories to explicitly include
includecategories=

#list of categories to exclude: error, info, batch, debug, statement,
#commit, rollback and result are valid values
excludecategories=info,debug,result,batch

#allows you to use a regex engine or your own matching engine to determine 
#which statements to log
#
#stringmatcher=com.p6spy.engine.common.GnuRegexMatcher
#stringmatcher=com.p6spy.engine.common.JakartaRegexMatcher
stringmatcher=

# prints a stack trace for every statement logged
stacktrace=false
# if stacktrace=true, specifies the stack trace to print
stacktraceclass=

# determines if property file should be reloaded
reloadproperties=false
# determines how often should be reloaded in seconds
reloadpropertiesinterval=60

#if=true then url must be prefixed with p6spy:
useprefix=false

#specifies the appender to use for logging
#appender=com.p6spy.engine.logging.appender.Log4jLogger
#appender=com.p6spy.engine.logging.appender.StdoutLogger
appender=com.p6spy.engine.logging.appender.FileLogger

# name of logfile, note that Windows users should make sure to use forward slashes in their pathname (used for file logger only)
logfile = spy.log

# append to the p6spy log file. if this is set to false the
# log file is truncated every time. (file logger only)
append=true

#The following are for log4j logging only
log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
log4j.appender.STDOUT.layout.ConversionPattern=p6spy - %m%n

#log4j.appender.CHAINSAW_CLIENT=org.apache.log4j.net.SocketAppender
#log4j.appender.CHAINSAW_CLIENT.RemoteHost=localhost
#log4j.appender.CHAINSAW_CLIENT.Port=4445
#log4j.appender.CHAINSAW_CLIENT.LocationInfo=true

log4j.logger.p6spy=INFO,STDOUT                                                                                       
</font>
</pre>
<p> <b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
  </font></b> <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>module.xxx</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>module.xxx </b>is 
  a particular module loaded at system startup. A module contains a group of functionality. 
  If a module line is not commented out, it is loaded into memory, and will remain 
  in memory until the application is restarted. Modules can not be changed by 
  using the <b>reloadproperties</b> function. If all modules are commented out, 
  then nothing except the wrapped database driver is loaded.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Currently the following 
  modules are supported:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">module.log=com.p6spy.engine.logging.P6LogSpyDriver<br>
    module.outage=com.p6spy.engine.outage.P6OutageSpyDriver</font></p>
</blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>module.log</b> 
  is required for the logging functionality, see <a href="p6modules.htm#p6log">P6Log</a>.<br>
  <b>module.outage</b> is required for the outage functionality, see <a href="p6modules.htm#p6outage">P6Outage</a>.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>realdriver</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>realdriver</b> 
  is where you specify the wrapped database driver.&nbsp;&nbsp;P6Spy wraps around 
  your existing driver, intercepts the incoming database requests, and outputs 
  them to a log file.&nbsp;To achieve this without requiring any code changes, 
  the P6Spy driver is listed with your application as the primary driver.&nbsp;P6Spy 
  then intercepts and logs the requests, and passes the requests to <b>realdriver,</b> 
  where it is processed as usual.&nbsp;An example follows:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">realdriver = oracle.jdbc.driver.OracleDriver</font></p>
</blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>realdriver2, 
  realdriver3</u> </b></font></p>
<p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">If you have multiple 
  database drivers, you need a way to specify these drivers. If you are using 
  the same database driver with multiple connection strings, you only need to 
  specify the driver once. For example, if you have two MySQL databases, mydb 
  and testdb, you want to connect to both databases and log their activity. Specify 
  <b>com.p6spy.engine.spy.P6SpyDriver</b> as the database driver for both of these 
  and set <b>realdriver</b> to the real mysql JDBC driver name. <b>realdriver2</b>, 
  <b>realdriver3</b> are only intended for use when you are connecting with two 
  different drivers, for example Oracle versus MySQL.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>filter, include, 
  exclude </u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Spy allows you 
  to monitor specific tables or specific statement types.&nbsp;By setting <b>filter=true</b>, 
  P6Spy will perform string matching on each statement to determine if it should 
  be written to the log file.&nbsp;&nbsp;<b>include</b> accepts a comma-delimited 
  list of expressions which is required to appear in a statement before it can 
  appear in the log. <b>exclude</b> accepts a comma-delimited list to exclude. 
  By default, string matching is performed using a basic substring match. However, 
  <font color="#000000">RegExp</font> matching can also be used (see <b>stringmatcher</b> 
  (Custom Filtering) below). Exclusion overrides inclusion, so that a statement 
  matching both an <b>include</b> string and an <b>exclude</b> string is excluded. 
  </font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An example showing 
  capture of all select statements, except the orders table follows:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">filter = true<br>
    # comma separated list of tables to include<br>
    include = select<br>
    # comma separated list of tables to exclude<br>
    exclude = orders</font></p>
</blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An example showing 
  only capture statements against order, order_details, price, and price_history 
  follows:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">filter = true<br>
    # comma separated list of tables to include<br>
    include = order,order_details,price,price_history<br>
    # comma separated list of tables to exclude<br>
    exclude =</font></p>
</blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An example showing 
  the capture of all statements, except statements against the order table follows:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">filter = false<br>
    # comma separated list of tables to include<br>
    include = <br>
    # comma separated list of tables to exclude<br>
    exclude = order</font></p>
</blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>filter, sqlexpression</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If you plan on 
  using a <font color="#000000">RegExp </font>engine, a simple alternative to 
  <b>exclude</b> and <b>include</b> is to use <b>sqlexpression</b>. An example 
  follows:</font></p>
<p><font face="Courier New, Courier, mono" size="2">filter = true<br>
  sqlexpression = your expression</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If your expression 
  matches the SQL string, it is logged. If the expression does not match, it is 
  not logged. If you use <b>sqlexpression</b>, any values set in <b>include</b> 
  and <b>exclude</b> are ignored.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>stringmatcher 
  (Custom Filtering)</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> If you want to 
  apply more intelligence to what is logged or not logged by P6Spy, you can specify 
  a custom matching engine. P6Spy comes with support for several <font color="#000000">RegExp</font> 
  engines, though it is trivial to introduce another engine by implementing the 
  <b>stringmatcher</b> interface. If a <b>stringmatcher</b> engine is specified, 
  P6Spy will pass each statement to the class specified to determine if that statement 
  should be logged.</font></p>
<ul>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font color="#000000">Using 
    GNU</font><font color="#CC3333"> <font color="#000000">RegEx</font></font><font color="#000000">p</font><i><font color="#CC3333"><br>
    </font></i></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000">P6Spy 
    comes with support for a regular expression matcher based on the GNU RegExp 
    library.</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    In order to do this, <a href="http://www.cacas.org/java/gnu/regexp/">download</a> 
    the GNU Java RexExp library and add it to your classpath so that P6Spy can 
    find it. The following is an example of the implementation:</font> 
    <p><font face="Courier New, Courier, mono" size="2"># Use GNU Regex Matching 
      for Filtering<br>
      stringmatcher =com.p6spy.engine.common.GnuRegexMatcher</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
      </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
      </font></p>
  </li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Using Jakarta 
    RegEx<i><br>
    </i>P6Spy also includes support for the Apache Jakarta RegExp library. In 
    order to do this, <a href="http://jakarta.apache.org/builds/jakarta-regexp/">download</a> 
    the Apache Jarkarta RegExp library and add it to your classpath so that P6Spy 
    can find it.</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    The following is an example of the implementation:</font> 
    <p><font face="Courier New, Courier, mono" size="2"># Use Apache Jakarta Regex 
      Matching for Filtering<br>
      stringmatcher =com.p6spy.engine.common.JakartaRegexMatcher</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
      <br>
      </font></p>
  </li>
</ul>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>autoflush</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">For standard development, 
  set the <b>autoflush</b> value to true. When set to true, every time a statement 
  is intercepted, it is immediately written to the log file.&nbsp;In some cases, 
  however, instant feedback on every statement is not a requirement. In those 
  cases, the system performs slightly faster with <b>autoflush</b> set to false</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An example follows:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">autoflush = true<br>
  <b><br>
  </b> <b><a name="appender"></a><u>appender</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Appenders allow 
  you to specify where and how log information is output. Appenders are a flexible 
  architecture allowing anyone to write their own output class for P6Spy. To use 
  an appender, specify the classname of the appender to use. The current release 
  comes with three options which are <b>log4j</b>, <b>stdout</b>, and logging 
  to a CSV text file (default).</font></p>
<ul>
  <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Using a CSV 
    File</font> 
    <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">To output to 
      a file, uncomment the <b>FileLogger</b> appender and specify a <b>logfile</b> 
      and whether or not to append to the file or to clear the file each time: 
      </font></p>
    <p><font size="2" face="Courier New, Courier, mono">#appender=com.p6spy.engine.logging.appender.Log4jLogger<br>
      #appender=com.p6spy.engine.logging.appender.StdoutLogger<br>
      appender=com.p6spy.engine.logging.appender.FileLogger</font></p>
    <p><font size="2" face="Courier New, Courier, mono"># name of logfile to use, 
      note Windows users should make sure to use forward slashes in their pathname(e:/test/spy.log) 
      (used for file logger only)<br>
      logfile = spy.log</font></p>
    <p><font size="2" face="Courier New, Courier, mono"># append to the p6spy 
      log file. if this is set to false the<br>
      # log file is truncated every time. (file logger only)<br>
      append=true</font></p>
  </li>
  <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Using StdOut</font> 
    <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Uncomment the 
      <b>StdoutLogger</b> as follows and all output will be sent to stdout in 
      a CSV format:</font></p>
    <p><font size="2" face="Courier New, Courier, mono">#appender=com.p6spy.engine.logging.appender.Log4jLogger<br>
      appender=com.p6spy.engine.logging.appender.StdoutLogger<br>
      #appender=com.p6spy.engine.logging.appender.FileLogger</font></p>
  </li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Using Log4J</font> 
    <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">To output to 
      <b>log4j</b>, make sure <b>log4j</b> is in your path, uncomment the <b>log4j</b> 
      appender, and specify the desired <b>log4j</b> settings:</font></p>
    <p><font size="2" face="Courier New, Courier, mono">appender=com.p6spy.engine.logging.appender.Log4jLogger<br>
      #appender=com.p6spy.engine.logging.appender.StdoutLogger<br>
      # appender=com.p6spy.engine.logging.appender.FileLogger</font></p>
    <p><font size="2" face="Courier New, Courier, mono">#The following are for 
      log4j logging only<br>
      log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender<br>
      log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout<br>
      log4j.appender.STDOUT.layout.ConversionPattern=p6spy - %m%n</font></p>
    <p><font size="2" face="Courier New, Courier, mono">#log4j.appender.CHAINSAW_CLIENT=org.apache.log4j.net.SocketAppender<br>
      #log4j.appender.CHAINSAW_CLIENT.RemoteHost=localhost<br>
      #log4j.appender.CHAINSAW_CLIENT.Port=4445<br>
      #log4j.appender.CHAINSAW_CLIENT.LocationInfo=true</font></p>
    <p><font size="2" face="Courier New, Courier, mono">log4j.logger.p6spy=INFO,STDOUT</font></p>
    <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If for some 
      reason <b>log4j</b> cannot be initialized, the logging will go to a file 
      called <b>log4jaux.log</b>.</font></p>
  </li>
</ul>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>excludecategories</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The log includes 
  category information that describes the type of statement. This property excludes 
  the listed categories. Valid options include the following:</font></p>
<ul>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><strong>error</strong> 
    includes P6Spy errors. (It is recommended that you include this category.)</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><strong>info</strong> 
    includes driver startup information and property file information. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><strong>debug 
    </strong>is only intended for use when you cannot get your driver to work 
    properly, because it writes everything.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><strong>statement 
    </strong> includes <b>Statements</b>, <b>PreparedStatements</b>, and <b>CallableStatements</b>.<strong> 
    </strong></font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#CC0033"><strong><font color="#000000">batch</font></strong><font color="#000000"> 
    includes calls made to the <b>addBatch()</b> JDBC API.</font></font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><strong>commit</strong> 
    includes calls made to the <b>commit()</b> JDBC API.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><strong>rollback</strong> 
    includes calls made to the <b>rollback()</b> JDBC API.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#CC0033"><strong><font color="#000000">result</font></strong><font color="#000000"> 
    includes statements generated by <b>ResultSet</b>.</font></font></li>
</ul>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Enter a comma-delimited 
  list of categories to exclude from your log file. See <b>filter</b>,<b>include</b>,<b>exclude</b> 
  for more details on how this process works.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>includecategories</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>includecategories</b> 
  includes category information that describes the type of statement. This property 
  is a comma-delimited list of categories to include. See <b>excludecategories</b> 
  for a valid list of categories.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>dateformat</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Setting a value 
  for <b>dateformat</b> changes the date format value printed in the log file. 
  No value prints the current time in milliseconds, a useful feature for parsing 
  the log. The date format engine is Java's <b>SimpleDateFormat</b> class. Refer 
  to the <b>SimpleDateFormat</b> class in the JavaDocs for information on setting 
  this value. </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An 
  example follows: </font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">dateformat=MM-dd-yy HH:mm:ss:SS</font></p>
</blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>stacktrace</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If <b>stacktrace</b> 
  is set, the log prints out the stack trace for each SQL statement logged.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>stacktraceclass</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Limits the stack 
  traces printed to those that contain the value set in <b>stacktraceclass</b>. 
  For example, specifying <b>stacktraceclass=com.mycompany.myclass </b> limits 
  the printing of stack traces to the specified class value. The stack trace is 
  converted to a String and <b>string.indexOf(stacktraceclass)</b> is performed.</font><br>
  <b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
  </font></b> <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>reloadproperties 
  and reloadpropertiesinterval</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If <b>reloadproperties</b> 
  is set to true, the property file is reloaded every <i>n</i> seconds, where 
  <i>n</i> is defined by the value set by <b>reloadpropertiesinterval</b>. For 
  example, if <b>reloadproperties=true</b> and <b>reloadpropertiesinterval=10</b>,<b> 
  </b> the system checks the <b>File.lastModified()</b> property of the property 
  file every 10 seconds, and if the file has been modified, it will be reloaded.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If you set <b>append=true</b>, 
  the log will be suddenly truncated when you change your properties. This is 
  because using <b>reloadproperties</b> is intended to be the equivalent of restarting 
  your application server. Restarting your application server truncates your log 
  file.</font></p>
<p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>reloadproperties</b> 
  will not reload any driver information (such as <b>realdriver</b>, <b>realdriver2</b>, 
  and <b>realdriver3</b>) and will not change the modules that are in memory.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>useprefix</u></b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Setting <b>useprefix</b> 
  to <b>true</b> requires you to prefix your URLs with <b>p6spy:</b>. The default 
  setting is <b>false</b>.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><u>Command Line 
  Options</u> </b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Every parameter 
  specified in the property file can be set and overriden at the command line 
  using the Java <b>-D</b> flag.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An example follows:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">java -Dp6logfile=my.log 
    -Dp6trace=true</font></p>
</blockquote>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In addition, you 
  can set the default directory to look for <b>spy.properties</b>, as shown in 
  the following example:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">java -Dp6.home=c:\orion\lib</font></p>
</blockquote>
<p><a name="log"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>Log 
  File Format</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The log file format 
  of <b>spy.log</b> follows:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">current time|execution time|category|statement 
    SQL String|effective SQL string</font></p>
</blockquote>
<ul>
  <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">current time</font></b><font face="Courier New, Courier, mono" size="2">&#151;</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The 
    current time is obtained through <b>System.getCurrentTimeMillis()</b> and 
    represents the number of milliseconds that have passed since January 1, 1970 
    00:00:00.000 GMT. (Refer to the J2SE documentation for further details on 
    <b>System.getCurrentTimeMillis()</b>.) <font color="#000000">This can be changed 
    to a different format using the <b>dateformat</b> property described in <a href="other.htm">Common 
    Property File Settings</a>.</font></font></li>
  <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">execution 
    time</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">&#151;The 
    time it takes for a particular method to execute. (This is not the total cost 
    for the SQL statement.) For example, a statement SELECT * FROM MYTABLE WHERE 
    THISCOL = ? might be executed as a prepared statement, in which the <b>.execute()</b> 
    function will be measured. This is recorded as the <b>statement</b> category. 
    Further, as you call <b>.next()</b> on the <b>ResultSet</b>, each <b>.next() 
    </b>call is recorded in the <b>result</b> category.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>category</b></font><font face="Courier New, Courier, mono" size="2">&#151;</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font color="#000000">You 
    can manage your log by including and excluding categories, which is described 
    in </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font color="#000000"><a href="other.htm">Common 
    Property File Settings</a></font></font><font color="#000000">. </font></font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>statement 
    SQL string</b>&#151;This is the SQL string passed to the statement object. 
    If it is a prepared statement, it will be the prepared statement as it was 
    prior to the parameters being set. To see the complete statement, refer to 
    <b>effective SQL string</b><font face="Verdana, Arial, Helvetica, sans-serif">.</font></font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>effective 
    SQL string</b></font><font face="Courier New, Courier, mono" size="2">&#151;</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If 
    you are not using a prepared statement, this will contains no value. Otherwise, 
    it fills in the values of the Prepared Statement so you can see the effective 
    SQL statement that is passed to the database. Of course, the database still 
    sees the prepared statement, but this string is a convenient way to see the 
    actual values <font color="#000000">being sent to the database.</font></font></li>
</ul>
<p><a name="jsp"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>The 
  JSP Application</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Spy now includes 
  a JSP application. Use this application to view configuration information about 
  P6Spy and to create a demarcation in the log file. To use the application, complete 
  the following steps:</font></p>
<ol>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Copy <b>p6spy.war</b> 
    into the deployment directory of your application server. In JBoss, for example, 
    the directory might be C:\JBoss-2.4.4_Tomcat-4.0.1\jboss\deploy. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Once <b>p6spy.war</b> 
    is deployed, access the application by navigating to http://<i>machine</i>:<i>port</i>/p6spy. 
    For example, if you are running the application on your own machine, and using 
    Tomcat as the servlet engine, navigate to http://localhost:8080/p6spy.</font></li>
</ol>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b><a name="build" id="faq"></a>Building 
  the Source </b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">To build the source, 
  complete the following steps:</font></p>
<ol>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> <a href="http://jakarta.apache.org/ant/index.html">Download 
    Jakarta Ant</a>. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Install Jararta 
    Ant.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font color="#000000">You 
    must also download some required libraries.</font><font color="#CC0033"> </font>Running 
    Ant the first time will display a message listing all required libraries and 
    locations where they can be downloaded. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Copy these libraries 
    into the<b> </b>lib directory, which is a subdirectory of your main directory 
    (the directory with the source code). </font></li>
</ol>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The following are 
  useful Ant targets:</font></p>
<ul>
  <li><font color="#CC3333"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font color="#000000">ant</font></b><font color="#000000"> 
    creates a<b> p6spy.jar</b> file in the dist directory.</font></font></font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><b>ant 
    clean</b> cleans the directory of build files and tool-generated backup files.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"> 
    <b>ant release</b> creates the Javadocs, the .war file, and all distribution 
    .zip and .jar files.</font></li>
  <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000">ant 
    test</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"> 
    runs the standard JUnit tests. Refer to the JUnit test instructions below.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#000000"><b>ant 
    perform</b> runs the performance specific JUnit tests.</font></li>
</ul>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">To run the JUnit 
  tests, complete the following steps:</font></p>
<ol>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="http://www.junit.org/index.htm">Download 
    JUnit</a>.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Install JUnit</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Edit the <b>P6Test.properties</b> 
    file and specify two databases. The configuration is set up for Oracle and 
    MySQL. You must change the Oracle URL, at minimum. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Copy the vendor 
    database JDBC drivers JAR files of the two databases into the lib directory.</font> 
  </li>
</ol>
<div align="center">
  <p align="left"><a name="modules"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>P6Spy 
    Modules</b></font></p>
</div>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Spy consists 
  of two modules that provide various types of functionality which can be modified 
  to suit your needs.</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif" color="#000000"> 
  These modules, P6Log and P6Outage, are explained in this section of the documentation. 
  Though they have distinct functions, they share some common property file settings 
  that allow you to specify which tables to log, the log file name, the log file 
  location, whether to show the stacktrace (where the JDBC statement is being 
  executed), and more.</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif" color="#CC0000"> 
  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Refer to 
  the <a href="other.htm#common">Common Property File Settings</a> documentation 
  for details. </font></p>
<blockquote> 
  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><a name="p6log"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>P6Log</b></font></font></p>
  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Log is an open-source 
    application included in the P6Spy distribution that intercepts and logs the 
    database statements of any application that uses JDBC. This application monitors 
    the SQL statements produced by EJB servers, enabling developers to write code 
    that achieves maximum efficiency on the server. The P6Log module is enabled 
    by default. Disable or enable the P6Log module by editing the <b>spy.properties</b> 
    configuration file. If the module is commented out, it is not loaded, and 
    the functionality is not available. If the module is not commented out, the 
    functionality is available. The applicable portion of the <b>spy.properties</b> 
    file follows:</font></p>
  <blockquote> 
    <pre><font face="Courier New, Courier, mono" size="2">#################################################################<br>
    # MODULES #<br>
    # #<br>
    # Modules provide the P6Spy functionality. If a module, such #<br>
    # as module_log is commented out, that functionality will not #<br>
    # be available. If it is not commented out (if it is active), #<br>
    # the functionality will be active. #<br>
    # #<br>
    # Values set in Modules cannot be reloaded using the #<br>
    # reloadproperties variable. Once they are loaded, they remain #<br>
    # in memory until the application is restarted. #<br>
    # #<br>
    #################################################################</font></pre>
    <pre><font face="Courier New, Courier, mono" size="2">module.log=com.p6spy.engine.logging.P6LogSpyDriver<br>
#module.outage=com.p6spy.engine.outage.P6OutageSpyDriver</font></pre>
  </blockquote>
  <p>&nbsp;</p>
  <p><a name="p6outage"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>P6Outage</b></font></p>
  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Outage is an 
    open-source application included in the P6Spy distribution that detects long-running 
    statements that may be indicative of a database outage problem. The product 
    logs any statement that surpasses the configurable time boundary during its 
    execution. P6Outage minimizes any logging performance overhead by logging 
    only long-running statements. The P6Outage module is disabled by default. 
    Disable or enable the P6Outage module by editing the <b>spy.properties</b> 
    configuration file. If the module is commented out, it is not loaded, and 
    the functionality is not available. If the module is not commented out, the 
    functionality is available.</font></p>
  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The applicable 
    portion of the <b>spy.properties</b> file follows:</font></p>
  <blockquote>
    <pre><font face="Courier New, Courier, mono" size="2">#################################################################<br>
    # MODULES #<br>
    # #<br>
    # Modules provide the P6Spy functionality. If a module, such #<br>
    # as module_log is commented out, that functionality will not #<br>
    # be available. If it is not commented out (if it is active), #<br>
    # the functionality will be active. #<br>
    # #<br>
    # Values set in Modules cannot be reloaded using the #<br>
    # reloadproperties variable. Once they are loaded, they remain #<br>
    # in memory until the application is restarted. #<br>
    # #<br>
    #################################################################</font></pre>
    <pre><font face="Courier New, Courier, mono" size="2">#module.log=com.p6spy.engine.logging.P6LogSpyDriver<br>
module.outage=com.p6spy.engine.outage.P6OutageSpyDriver</font></pre>
  </blockquote>
  <p>&nbsp;</p>
  <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">The following 
    are P6Outage-specific properties:</font></p>
  <ul>
    <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>outagedetection</b></font> 
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"></font> <font size="2" face="Verdana, Arial, Helvetica, sans-serif">This 
        feature detects long-running statements that may be indicative of a database 
        outage problem. When enabled, it logs any statement that surpasses the 
        configurable time boundary during its execution. No other statements are 
        logged except the long-running statements.</font></p>
    </li>
    <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>outagedetectioninterval</strong></font> 
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">The interval 
        property is the boundary time set in seconds. For example, if set to 2, 
        any statement requiring at least 2 seconds is logged. The same statement 
        will continue to be logged for as long as it executes. So, if the interval 
        is set to 2 and a query takes 11 seconds, it is logged 5 times (at the 
        2, 4, 6, 8, 10-second intervals).</font></p>
    </li>
  </ul>
</blockquote>
<p>&nbsp;</p>
<ol>
  <blockquote> 
    <div align="left"></div>
  </blockquote>
</ol>
<!-- #EndEditable --> 
<br>
<table width="100%" border="0" bgcolor="black">
<tr>
<td>
<table width="580" border="0">
  <tr> 
    <td width="11%"><a href="http://www.p6spy.com"><img src="http://www.p6spy.com/documentation/images/p6spy_com.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/index.htm"><img src="http://www.p6spy.com/documentation/images/index.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/install.htm"><img src="http://www.p6spy.com/documentation/images/install.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/p6spymodules.htm#p6log"><img src="http://www.p6spy.com/documentation/images/p6log.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/p6spymodules.htm#p6outage"><img src="http://www.p6spy.com/documentation/images/p6outage.gif" width="110" height="20" border="0"></a></td>
    <td width="38%">&nbsp;</td>
  </tr>
</table>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
