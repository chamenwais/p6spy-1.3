<html><!-- #BeginTemplate "/Templates/spydocs.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>P6Spy Documentation</title>

<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF">
<table width="100%" border="0" bgcolor="black">
<tr>
<td>
<img src="http://www.p6spy.com/documentation/images/header.gif" width="580" height="80"> 
<br> 
<table width="580" border="0">
  <tr> 
    <td width="11%"><a href="http://www.p6spy.com"><img src="http://www.p6spy.com/documentation/images/p6spy_com.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/index.htm"><img src="http://www.p6spy.com/documentation/images/index.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/install.htm"><img src="http://www.p6spy.com/documentation/images/install.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/p6log.htm"><img src="http://www.p6spy.com/documentation/images/p6log.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/p6outage.htm"><img src="http://www.p6spy.com/documentation/images/p6outage.gif" width="110" height="20" border="0"></a></td>
    <td width="38%">&nbsp;</td>
  </tr>
</table>
</td>
</tr>
</table>
<br>
<!-- #BeginEditable "body" --> 
<div align="center"> 
  <p><a name="install"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>Configuration 
    and Usage</b></font></p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
</div>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b><a name="common"></a></b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>Common 
  Property File Settings</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">An example property 
  file follows:</font></p>
<pre><font face="Courier New, Courier, mono" size="2">
#################################################################
# P6Spy Options File #
# See documentation for detailed instructions #
#################################################################

#################################################################
# MODULES #
# #
# Modules provide the P6Spy functionality. If a module, such #
# as module_log is commented out, that functionality will not #
# be available. If it is not commented out (if it is active), #
# the functionality will be active. #
# #
# Values set in Modules cannot be reloaded using the #
# reloadproperties variable. Once they are loaded, they remain #
# in memory until the application is restarted. #
# #
#################################################################

module.log=com.p6spy.engine.logging.P6LogFactory
#module.outage=com.p6spy.engine.outage.P6OutageFactory

#################################################################
# REALDRIVER(s) #
# #
# In your application server configuration file you replace the #
# "real driver" name with com.p6spy.engine.P6SpyDriver. This is #
# where you put the name of your real driver P6Spy can find and #
# register your real driver to do the database work. #
# #
# If your application uses several drivers specify them in #
# realdriver2, realdriver3. See the documentation for more #
# details. #
# #
# Values set in REALDRIVER(s) cannot be reloaded using the #
# reloadproperties variable. Once they are loaded, they remain #
# in memory until the application is restarted. #
# #
#################################################################

# realdriver=org.gjt.mm.mysql.Driver 
realdriver=org.gjt.mm.mysql.Driver
#specifies another driver to use
realdriver2=
#specifies a third driver to use
realdriver3=

################################################################
# P6LOG SPECIFIC PROPERTIES #
################################################################
# no properties currently available

################################################################
# P6OUTAGE SPECIFIC PROPERTIES #
################################################################
# Outage Detection
#
# This feature detects long-running statements that may be indicative of
# a database outage problem. If this feature is turned on, it will log any
# statement that surpasses the configurable time boundary during its execution.
# When this feature is enabled, no other statements are logged except the long
# running statements. The interval property is the boundary time set in seconds.
# For example, if this is set to 2, then any statement requiring at least 2 
# seconds will be logged. Note that the same statement will continue to be logged
# for as long as it executes. So if the interval is set to 2, and the query takes
# 11 seconds, it will be logged 5 times (at the 2, 4, 6, 8, 10 second intervals).
#
# outagedetection=true|false
# outagedetectioninterval=integer time (seconds)
#
outagedetection=false
outagedetectioninterval=

################################################################
# COMMON PROPERTIES #
################################################################

# comma separated list of tables to include
include =
# comma separated list of tables to exclude
exclude =

# sql expression to evaluate if using regex
sqlexpression = 

# filter what is logged
filter=false 

# turn on tracing
autoflush = true

# sets the date format using Java's SimpleDateFormat routine
dateformat=

#list of categories to explicitly include
includecategories=

#list of categories to exclude: error, info, batch, debug, statement,
#commit, rollback and result are valid values
excludecategories=info,debug,result,batch

#allows you to use a regex engine or your own matching engine to determine 
#which statements to log
#
#stringmatcher=com.p6spy.engine.common.GnuRegexMatcher
#stringmatcher=com.p6spy.engine.common.JakartaRegexMatcher
stringmatcher=

# prints a stack trace for every statement logged
stacktrace=false
# if stacktrace=true, specifies the stack trace to print
stacktraceclass=

# determines if property file should be reloaded
reloadproperties=false
# determines how often should be reloaded in seconds
reloadpropertiesinterval=60

#if=true then url must be prefixed with p6spy:
useprefix=false

#specifies the appender to use for logging
#appender=com.p6spy.engine.logging.appender.Log4jLogger
#appender=com.p6spy.engine.logging.appender.StdoutLogger
appender=com.p6spy.engine.logging.appender.FileLogger

# name of logfile, note that Windows users should make sure to use forward slashes in their pathname (used for file logger only)
logfile = spy.log

# append to the p6spy log file. if this is set to false the
# log file is truncated every time. (file logger only)
append=true

#The following are for log4j logging only
log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
log4j.appender.STDOUT.layout.ConversionPattern=p6spy - %m%n

#log4j.appender.CHAINSAW_CLIENT=org.apache.log4j.net.SocketAppender
#log4j.appender.CHAINSAW_CLIENT.RemoteHost=localhost
#log4j.appender.CHAINSAW_CLIENT.Port=4445
#log4j.appender.CHAINSAW_CLIENT.LocationInfo=true

log4j.logger.p6spy=INFO,STDOUT                                                                                       
</font>
</pre>
<p> <b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
  </font></b> <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>module.xxx</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">module.xxx is the 
  name of a particular module to be loaded at system startup. A module contains 
  a group of functionality. If a module line is not commented out, it is loaded 
  into memory, and will remain in memory until the application is restarted. Modules 
  can not be changed by using the reloadproperties function. If all modules are 
  commented out, then nothing except the real database driver is loaded.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Currently the following 
  modules are supported:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">module.log=com.p6spy.engine.logging.P6LogSpyDriver<br>
  module.outage=com.p6spy.engine.outage.P6OutageSpyDriver</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">module.log is required 
  for the logging functionality, see P6Log.<br>
  module.outage is required for the outage functionality, see P6Outage.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>realdriver</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">realdriver is where 
  you specify the real database driver that you use.&nbsp;&nbsp;P6Spy wraps around 
  your existing driver, intercepts the incoming database requests, and outputs 
  them to a log file.&nbsp;&nbsp;To achieve this without requiring any code changes, 
  the P6Spy driver is listed with your application as the primary driver.&nbsp;&nbsp;P6Spy 
  then intercepts and logs the requests, and passes the request to the realdriver 
  where it is processed as usual.&nbsp;&nbsp;Example:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">realdriver = oracle.jdbc.driver.OracleDriver</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>realdriver2, 
  realdriver3 </b></font></p>
<p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">if you have multiple 
  database drivers then you need a way to specify these drivers. This is where 
  realdriver2 and realdriver3 are used.</font></p>
<p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Note that if you 
  are using the same database driver with multiple connection strings, you only 
  need to specify the driver once. E.g. say you have two MySQL databses: mydb 
  and testdb. You want to connect to both databases and log their activity. You 
  have two datasources defined. You should specify com.p6spy.engine.spy.P6SpyDriver 
  as the database driver for both of these and you should set the realdriver= 
  the real mysql JDBC driver name. realdriver2, realdriver3 are only intended 
  for use when you are connecting with two different drivers, for example Oracle 
  versus MySQL.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>filter, include, 
  exclude </b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Spy lets you 
  monitor specific tables or specific statement types.&nbsp;&nbsp;By setting filter=true 
  P6Spy will perform string matching on each statement to determine if it should 
  be written to the log file.&nbsp;&nbsp;include accepts a comma separated list 
  of expressions which are required to be appear in a statement before it can 
  appear in the log, exclude accepts a comma separated list to exclude. By default 
  string matching is performed using a basic substring match. However Regex matching 
  can also be used (see Custom Filtering below). Note that exclusion overrides 
  inclusion, so that a statement matching both an include string and an exclude 
  string will be excluded. </font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">example (capture 
  all select statements except the orders table):</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">filter = true<br>
  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"># comma separated 
  list of tables to include<br>
  include = select<br>
  # comma separated list of tables to exclude<br>
  exclude = orders</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">example (only captures 
  statements against order,order_details,price, and price_history):</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">filter = true<br>
  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"># comma separated 
  list of tables to include<br>
  include = order,order_details,price,price_history<br>
  # comma separated list of tables to exclude<br>
  exclude =</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">example (captures 
  all statements except statements against the order table):</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">filter = false<br>
  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"># comma separated 
  list of tables to include<br>
  include = <br>
  # comma separated list of tables to exclude<br>
  exclude = order</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>filter, sqlexpression</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If you plan on 
  using a regex engine, a simple alternative to exclude and include is to use 
  sqlexpression. It works like this:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">filter = true<br>
  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">sqlexpression 
  = your expression</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If your expression 
  matches the SQL string, it is logged, if not, it is not. Note, if you use sqlexpression, 
  any values set in include and exclude are ignored.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>stringmatcher 
  (Custom Filtering)</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> If you want to 
  apply more intelligence to what is logged or not logged by P6Spy you can specify 
  a custom matching engine. P6Spy comes with support for several regex engines, 
  though it is trivial to introduce another engine by implementing the StringMatcher 
  interface. If a stringmatcher engine is specified, P6Spy will pass each statement 
  to the class specified to determine if that statement should be logged.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><i>Using GNU RegEx<br>
  </i></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Spy 
  comes with support for a regular expression matcher based on the GNU Regex library. 
  To use this, for example, you would specify:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"># Use GNU Regex 
  Matching for Filtering<br>
  stringmatcher =com.p6spy.engine.common.GnuRegexMatcher<br>
  <br>
  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Note that 
  in order to do this you must <a href="http://www.cacas.org/java/gnu/regexp/">download</a> 
  the GNU Java regex library and add it to your classpath so that P6Spy can find 
  it. <br>
  <i><br>
  </i> <i>Using Jakarta RegEx<br>
  </i>P6Spy also includes support for the Apache Jakarta Regex library. To use 
  this, you would specify:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"># Use Apache Jakarta 
  Regex Matching for Filtering<br>
  stringmatcher =com.p6spy.engine.common.JakartaRegexMatcher<br>
  <br>
  Note that in order to do this you must <a href="http://jakarta.apache.org/builds/jakarta-regexp/">download</a> 
  the Apache Jarkarta regex library and add it to your classpath so that P6Spy 
  can find it.</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
  </font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>autoflush</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">For standard development 
  this value should be set to true. &nbsp;When set to true every time a statement 
  is intercepted it is immediately written to the log file.&nbsp;&nbsp;In some 
  cases, however, instant feedback on every statement is not a requirement, and 
  the system will perform slightly faster with this value set to false</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Example:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">autoflush = true<br>
  <b><br>
  </b> </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><a name="appender"></a>appender</b></font></p>
<p><font face="Arial, Helvetica, sans-serif" size="2">Appenders allow you to specify 
  where and how log information is output. Appenders are a flexible architecture 
  allowing anyone to write their own output class for P6Spy. To use an appender, 
  specify the classname of the appender to use. The current release comes with 
  three optionswhich are log4j, stdout, and logging to a csv text file (default).</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif"><em>Using CSV File (default)</em></font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">To output to a file, uncomment 
  the FileLogger appender and specify a logfile and whether or not to append to 
  the file or clear the file each time: </font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">#appender=com.p6spy.engine.logging.appender.Log4jLogger<br>
  #appender=com.p6spy.engine.logging.appender.StdoutLogger<br>
  appender=com.p6spy.engine.logging.appender.FileLogger</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif"># name of logfile to use, 
  note Windows users should make sure to use forward slashes in their pathname(e:/test/spy.log) 
  (used for file logger only)<br>
  logfile = spy.log</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif"># append to the p6spy log 
  file. if this is set to false the<br>
  # log file is truncated every time. (file logger only)<br>
  append=true</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif"><em>Using StdOut</em></font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">Uncomment the StdoutLogger 
  as follows and all output will be sent to stdout in a CSV format:</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">#appender=com.p6spy.engine.logging.appender.Log4jLogger<br>
  appender=com.p6spy.engine.logging.appender.StdoutLogger<br>
  #appender=com.p6spy.engine.logging.appender.FileLogger</font></p>
<p><font face="Arial, Helvetica, sans-serif" size="2"><em>Using Log4J</em></font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">To output to log4j, make 
  sure log4j is in your path, uncomment the log4j appender, and specify the desired 
  log4j settings:</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">appender=com.p6spy.engine.logging.appender.Log4jLogger<br>
  #appender=com.p6spy.engine.logging.appender.StdoutLogger<br>
  # appender=com.p6spy.engine.logging.appender.FileLogger</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">#The following are for log4j 
  logging only<br>
  log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender<br>
  log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout<br>
  log4j.appender.STDOUT.layout.ConversionPattern=p6spy - %m%n</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">#log4j.appender.CHAINSAW_CLIENT=org.apache.log4j.net.SocketAppender<br>
  #log4j.appender.CHAINSAW_CLIENT.RemoteHost=localhost<br>
  #log4j.appender.CHAINSAW_CLIENT.Port=4445<br>
  #log4j.appender.CHAINSAW_CLIENT.LocationInfo=true</font></p>
<p><font size="2" face="Arial, Helvetica, sans-serif">log4j.logger.p6spy=INFO,STDOUT</font></p>
<p><font face="Arial, Helvetica, sans-serif" size="2">If for some reason log4j 
  cannot be initialized, the logging will go to a file called log4jaux.log</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>excludecategories</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The log includes 
  category information that describes the type of statement. This property excludes 
  the listed categories. Valid options include:</font></p>
<ul>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>error</strong> 
    includes P6Spy errors. It is recommended you do not exclude this category</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>info</strong> 
    includes driver startup information and property file information </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>debug 
    </strong>is only intended for use when you cannot get your driver to work 
    properly, it dumps out everything</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>statement 
    </strong> includes Statements, PreparedStatements, and CallableStatements<strong> 
    </strong></font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>batch</strong> 
    addBatch() calls</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>commit</strong> 
    commit() calls</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>rollback</strong> 
    rollaback() calls</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><strong>result</strong> 
    are statements generated by ResultSet</font></li>
</ul>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Enter a comma separated 
  list of categories to exclude from your log file. See filter,include,exclude 
  for more details on how this process works.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>includecategories</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The log includes 
  category information that describes the type of statement. This property is 
  a comma separated list of categories to include. See excludecategories for a 
  valid list of categories.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>dateformat</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Setting a value 
  for dateformat changes the date format value printed in the log file. No value 
  prints the current time in milliseconds, a useful feature for parsing the log. 
  The date format engine is Java's SimpleDateFormat class. See the SimpleDateFormat 
  class in the JavaDocs for information on setting this value. Example value: 
  dateformat=MM-dd-yy HH:mm:ss:SS</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>stacktrace</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If stack trace 
  is set, prints out the stack trace for each sql statement logged.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>stacktraceclass</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Limits the stack 
  traces printed out to those that contain this value. E.g. specifying stacktraceclass=com.mycompany.myclass 
  would limit the printing of stack traces to the specified class value. The stack 
  trace is converted to a String and string.indexOf(stacktraceclass) is performed.</font><br>
  <b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
  </font></b> <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>reloadproperties 
  and reloadpropertiesinterval</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If reloadproperties 
  is set to true, then the property file is reloaded every n seconds, where n 
  is defined by the value set by reloadpropertiesinterval. For example, if reloadproperties=true 
  and reloadpropertiesinterval=10 then the system checks the File.lastModified() 
  property of the property file every 10 seconds, and if the file has been modified, 
  then it will be reloaded.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Warning! If you 
  have append=true the log will be suddenly truncated if you change your properties. 
  This is because using reloadproperties is intended to be the equivalent of restarting 
  your application server, and in the case of an application server restart your 
  file would be truncated.</font></p>
<p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Limitations: reloadproperties 
  will not reload any driver information (such as realdriver, realdriver2, and 
  realdriver3) and will not change the modules that are in memory.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>useprefix</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">When set to true 
  requires you to prefix your URLs with p6spy:. The default is false, but may 
  become true in a future release. This helps avoid a common pital when installing 
  p6spy, that your real driver is registered elsewhere and because the URLs are 
  the same, the system does not know which driver to use.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b></b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Command 
  Line Options </b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Every parameter 
  specified in the property file can be set and override at the command line using 
  the Java -D flag.</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Example:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">java -Dp6logfile=my.log 
  -Dp6trace=true</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In addition, you 
  can set the default directory to look for spy.properties:</font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">java -Dp6.home=c:\orion\lib</font></p>
<p><a name="log"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>Log 
  File Format</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The log file format 
  of <b>spy.log</b> follows:</font></p>
<blockquote> 
  <p><font face="Courier New, Courier, mono" size="2">current time|execution time|category|statement 
    SQL String|effective SQL string</font></p>
</blockquote>
<ul>
  <li><font face="Courier New, Courier, mono" size="2">current time</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    - The current time is obtained through System.getCurrentTimeMillis() and represents 
    the number of milliseconds that have passed since January 1, 1970 00:00:00.000 
    GMT. (Refer to the J2SE documentation for further details on System.getCurrentTimeMillis().) 
    <font color="#CC3333">This can be changed to a different format using the 
    dateformat property described later in this section.</font></font></li>
  <li><font face="Courier New, Courier, mono" size="2">execution time</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    - The time it took for the method to execute. This is not the total cost for 
    the SQL statement, but rather the time it takes to execute a particular method. 
    For example, a statement SELECT * FROM MYTABLE WHERE THISCOL = ? might be 
    executed as a prepared statement, in which the .execute() function will be 
    measured. This is recorded as the &quot;statement&quot; category. Further, 
    as you call .next() on the ResultSet, each .next() call is recorded in the 
    result category.</font></li>
  <li><font face="Courier New, Courier, mono" size="2">category</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    - <font color="#CC3300">You can manage your log by including and excluding 
    categories, which is described above. </font></font></li>
  <li><font face="Courier New, Courier, mono" size="2">statement SQL string</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    - This is the SQL string passed to the statement object. If it is a prepared 
    statement, it will be the prepared statement as it was prior to the parameters 
    being set. To see the complete statement, see <font face="Courier New, Courier, mono">effective 
    SQL string</font>.</font></li>
  <li><font face="Courier New, Courier, mono" size="2">effective SQL string</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    - If you are not using a prepared statement, this will be empty. Otherwise, 
    it will fill in the values of the Prepared Statement so you can see the effective 
    SQL statement that is passed to the database. Of course, the database still 
    sees the prepared statement, but this string is a convenient way to see the 
    actual values <font color="#CC3300">being sent to the database.</font></font></li>
</ul>
<p><a name="jsp"></a><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>The 
  JSP Application</b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Spy now includes 
  a JSP application. Use this application to view configuration information about 
  P6Spy and to create a demarcation in the log file. To use the application, complete 
  the following steps:</font></p>
<ol>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Copy <b>p6spy.war</b> 
    into the deployment directory of your application server. In JBoss, for example, 
    the directory might be <b>C:\JBoss-2.4.4_Tomcat-4.0.1\jboss\deploy</b>. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Once <b>p6spy.war</b> 
    is deployed, access the application by navigating to http://<i>machine</i>:<i>port</i>/p6spy. 
    For example, if you are running the application on your own machine, and using 
    Tomcat as the servlet engine, navigate to http://localhost:8080/p6spy.</font></li>
</ol>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b><a name="build" id="faq"></a>Building 
  the Source </b></font></p>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">To build the source, 
  complete the following steps:</font></p>
<ol>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> <a href="http://jakarta.apache.org/ant/index.html">Download 
    Jakarta Ant</a>. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Install Jararta 
    Ant.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font color="#000000">You 
    must also download some required libraries.</font><font color="#CC0033"> </font>Running 
    Ant the first time will display a message listing all required libraries and 
    locations where they can be downloaded. </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Copy these libraries 
    into the<b> lib/</b> directory, which is a subdirectory of your main directory 
    (the directory with the source code). </font></li>
</ol>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The following are 
  useful Ant targets:</font></p>
<ul>
  <li><font color="#CC3333">[<font face="Verdana, Arial, Helvetica, sans-serif" size="2">no 
    target</font>]<font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
    creates a<b> p6spy.jar</b> file in the <b>dist/</b> directory</font></font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#CC3333">[clean] 
    cleans the directory of build files and tool generated backup files</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#CC3333">[release] 
    creates the Javadocs, the .war file, and all distribution .zip and .jar files</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#CC3333">[test] 
    runs the standard Junit tests (see notes below)</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2" color="#CC3333">[perform] 
    runs the performance specific JUnit tests</font></li>
</ul>
<p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">To run the JUnit 
  tests, complete the following steps:</font></p>
<ol>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="http://www.junit.org/index.htm">Download 
    JUnit</a>.</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Install JUnit</font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Edit the <b>P6Test.properties</b> 
    file and specify two databases. The configuration is set up for Oracle and 
    MySQL (you will have to change the Oracle URL at a minimum). </font></li>
  <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Copy the vendor 
    database JDBC drivers JAR files of the two databases into the <b>lib/</b> 
    directory.</font>
    <div align="left"></div>
  </li>
</ol>
<!-- #EndEditable --> <br>
<table width="100%" border="0" bgcolor="black">
<tr>
<td>
<table width="580" border="0">
  <tr> 
    <td width="11%"><a href="http://www.p6spy.com"><img src="http://www.p6spy.com/documentation/images/p6spy_com.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/index.htm"><img src="http://www.p6spy.com/documentation/images/index.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/install.htm"><img src="http://www.p6spy.com/documentation/images/install.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/p6log.htm"><img src="http://www.p6spy.com/documentation/images/p6log.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="http://www.p6spy.com/documentation/p6outage.htm"><img src="http://www.p6spy.com/documentation/images/p6outage.gif" width="110" height="20" border="0"></a></td>
    <td width="38%">&nbsp;</td>
  </tr>
</table>
</td>
</tr>
</table>
</body>
<!-- #EndTemplate --></html>
