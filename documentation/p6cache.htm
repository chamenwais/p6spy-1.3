<html><!-- #BeginTemplate "/Templates/spydocs.dwt" -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Untitled Document</title>
<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#000000" text="#000000">
<img src="images/header.gif" width="580" height="80"> <br>
<table width="100%" border="0">
  <tr> 
    <td width="11%"><a href="http://www.p6spy.com" target="_parent"><img src="images/p6spy_com.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="index.htm" target="bottomFrame"><img src="images/index.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="install.htm" target="bottomFrame"><img src="images/install.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="p6log.htm" target="bottomFrame"><img src="images/p6log.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="p6outage.htm" target="bottomFrame"><img src="images/p6outage.gif" width="110" height="20" border="0"></a></td>
    <td width="7%"><a href="p6cache.htm" target="bottomFrame"><img src="images/p6cache.gif" width="110" height="20" border="0"></a></td>
    <td width="38%">&nbsp;</td>
  </tr>
</table>
<br>
<table width="100%" border="0" cellpadding="20" cellspacing="20">
  <tr>
    <td bgcolor="#FFFFFF"> <!-- #BeginEditable "body" --> 
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="4"><b>P6Cache</b></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>About 
        P6Cache</b></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Cache provides 
        seamless caching to any application running JDBC. P6Cache was designed 
        for easy installation and to require no code changes in existing applications. 
        This module is particularly useful for caching queries in session beans, 
        as well as for applications that do not use EJBs and need a mechanism 
        to provide caching.</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">The current 
        version of P6Cache is in-process and the cache is specific to the JVM. 
        This means the current version does not implement a LRU algorithm, does 
        not enable distributed caching, does not allow caches to be saved and 
        copied, and only supports time based caches (caches that expire at a specific 
        time). However, it is expected that LRU, save/restore, distributed caching 
        and trigger based caching support will be added in future releases. (Trigger 
        based caching means that a cache would automatically be invalidated by 
        a particular statement. For example, a cache created around select id 
        from lookup_table would be invalidated by the statement &quot;update lookup_table 
        ...&quot;.) Distributed caching has already been successfully tested, 
        however, the codebase is no longer compatiable and for various reasons 
        discussed below, we decided to defer implementing this feature.</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Note that 
        the decisions to implement/not implement specific functionality were not 
        arbitrary. It is believed that the functionality provided in the first 
        version is the optimal set for most applications. The LRU algorithm, while 
        useful, assumes that your cache will grow large enough to be a problem 
        for the memory available. We are making the assumption the system will 
        have enough memory available. Not running a LRU algorithm allows the system 
        to run faster. Trigger based caching is likewise very useful, but comes 
        at a higher performance and complexity cost and requires that the system 
        know about all database interactions. Meanwhile, most systems can do fine 
        without them. For example, inventory checks on product pages on a website 
        may generate enough traffic that constant database hits would be a problem. 
        However, with a 15 minute cache on that query, the product page is often 
        close enough to accurate. If real inventory values are a concern, the 
        developer could then implement a second query on the checkout page that 
        would not be cached. This is a very common technique, for example, some 
        major online auction sites implement this methodology to strike a balance 
        between traffic and the need for accuracy. The ability to save and copy 
        caches helps avoid huge database hits during startup, however, often times 
        the reason for restarting the server is to change functionality that may 
        impact the caches. An alternative is to prebuild the caches during startup 
        once, and copy them to every application server, however, this has a number 
        of complexity implications we wanted to avoid for this version. Finally, 
        the decision to not implement a distributed cache was the result of research 
        done on the product. The results of the research showed that the overhead 
        of distributed caching could be significant enough to actually degrade 
        performance when performed unnecessarily. While this overhead can be reduced, 
        ultimately a distributed cache will always be slower than an in-process 
        cache. Distributed caching is particularly important when trigger based 
        caching is used, since the trigger based cache would ideally expire when 
        trigger by any of the application servers. However, since trigger based 
        caching was not implemented in this version, distributed caching was not 
        essential.</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Turning 
        on P6Cache</b></font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">The P6Cache 
        module is disabled by default. To enable it, uncomment the module in spy.properties, 
        see the example below:</font></p>
      <blockquote> 
        <p>#################################################################<br>
          # MODULES #<br>
          # #<br>
          # Modules provide the P6Spy functionality. If a module, such #<br>
          # as module_log is commented out, that functionality will not #<br>
          # be available. If it is not commented out (if it is active), #<br>
          # the functionality will be active. #<br>
          # #<br>
          # Values set in Modules cannot be reloaded using the #<br>
          # reloadproperties variable. Once they are loaded, they remain #<br>
          # in memory until the application is restarted. #<br>
          # #<br>
          #################################################################</p>
        <p>module_cache=com.p6spy.engine.outage.P6CacheDriver<br>
          #module_log=com.p6spy.engine.logging.P6LogSpyDriver</p>
      </blockquote>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Using 
        P6Cache</b></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Cache was 
        designed to be easy to use, but it is a bit more complex than the logging 
        application. P6Cache works by intercepting JDBC statements and comparing 
        them to <i>query forms</i> that specify what should be cached and for 
        how long. A query form is similar to a prepared statement. P6Cache reads 
        the query forms you want to cache and the expiration time for the query 
        form from the spy.forms file.</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">To determine 
        what you want to cache set the formstrace equal to true in spy.properties. 
        This causes P6Cache to write all of the query forms that it sees to the 
        file forms.log. (You will only use this in development, in production 
        you will set formstrace=false). Forms.log will contain entries such as:</font></p>
      <blockquote> 
        <p>00:00:00; select ? from stmt_test</p>
      </blockquote>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Look through 
        the query forms and copy the ones that interest you. Paste these into 
        spy.forms. Spy.forms looks like this:</font></p>
      <blockquote> 
        <p># use form: expiration_time; query from forms.log file<br>
          # 00:00:00; select count(*) from prepstmt_test where col2 = ?<br>
          #<br>
          # We support the following expiration time shorthands:<br>
          # 660 - just 660 minutes - the default.<br>
          # 1 day - 1 day from now<br>
          # 1 hour - 1 hour<br>
          # 1 hr - 1 hour<br>
          # 1 min - 1 minute<br>
          # 1 minute - 1 minute<br>
          # 1 sec - 1 second - not much point of course<br>
          # 1 second - 1 second<br>
          # 2 days - 2 days<br>
          # 2 hours - 2 hours<br>
          # 2 hrs - 2 hours<br>
          # 2 minutes - 2 minutes<br>
          # 2 seconds - 2 seconds<br>
          # 2 secs - 2 seconds<br>
          # 6 days - 6 days<br>
          # 60 mins - 60 minutes<br>
          # 12:00:00 - at 12:00:00 regardless of when the cache was created<br>
          # 23:59:59 - at 23:59:59 regardless of when the cache was created.<br>
          # 23:59 - at 23:59:00 regardless of when the cache was created.<br>
          # 12:01 - at 12:01:00 regardless of when the cache was created.</p>
        <p>00:00:00; select ? from stmt_test</p>
      </blockquote>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This would 
        create a cache for &quot;select ? from stmt_test&quot; that expires at 
        midnight every day. You might prefer to create a cache that is valid for 
        15 minutes. You would do that by changing &quot;00:00:00; select ? from 
        stmt_test&quot; to read &quot;15 minutes; select ? from stmt_test&quot;</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Once the 
        caches are defined in spy.forms restart your server and P6Cache will begin 
        caching.</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Advanced 
        Configuration</b></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">You can set 
        additional properties in the spy.properties file. In the file you will 
        find a P6Cache specific section:</font></p>
      <blockquote> 
        <p>################################################################<br>
          # P6CACHE SPECIFIC PROPERTIES #<br>
          ################################################################</p>
        <p># if the driver is loaded, determines if caching is performed<br>
          cache=true</p>
        <p># outputs trace information into the p6log file <br>
          cachetrace=false</p>
        <p># the SQL command the causes the cache to clear. this can be<br>
          # any command, such as &quot;clear cache&quot;. It is intercepted and<br>
          # never actually executed by the real driver<br>
          clearcache=</p>
        <p># the default number of entries expected. use for performance<br>
          # purposes<br>
          entries=</p>
        <p># the file that contains the query forms to cache<br>
          # this file should contain a series of individual<br>
          # lines with:<br>
          # &lt;expirationtime&gt;;&lt;query form&gt;<br>
          # hh:mm:ss; query take from forms.log<br>
          # 00:10:00; select ? from stmt_test<br>
          formsfile=spy.forms</p>
        <p># the location of an automatically generated file that contains<br>
          # a list of the forms seen by p6cache. you can just copy these<br>
          # into the formsfile<br>
          formslog=forms.log</p>
        <p># run this during development to determine which query forms<br>
          # you want to cache<br>
          formstrace=true</p>
      </blockquote>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>cache</b></font></p>
      <p> <font size="2" face="Verdana, Arial, Helvetica, sans-serif">When the 
        module is enabled, setting cache=true causes caching to be enabled. Setting 
        cache=false causes caching to be disabled.</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>cachetrace</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Outputs debug 
        information in spy.log.</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>clearcache</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This allows 
        you to define a SQL statement that, when executed, will clear all of the 
        caches. For example, you could set:</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">clearcache=clear 
        caches</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">so whenever 
        you execute the SQL statement &quot;clear caches&quot; it would clear 
        the cache</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>entries</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">allows you 
        to define the default cache size</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>formsfile</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">this defaults 
        to spy.forms and is the file that contains the list of query forms to 
        cache</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>formslog</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">this defaults 
        to forms.log, see formstrace</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>formstrace</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">when set 
        to true formstrace causes all query forms that P6Cache finds to be logged 
        to the formslog. This is particularly important during development, so 
        the developer can easily spot queries to cache.</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>Other 
        Properties</strong></font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">P6Cache does 
        not share common properties. Currently this means P6Cache does not support 
        reloading of properties. This was purposely left out due to lack of time 
        to prove performance would not be impacted. Ultimately, reload check should 
        not impact performance, and it will probably be enabled.</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>Using 
        Caching and Logging Together</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If you have 
        both P6Cache enabled and P6Log enabled, the behavior is dependent on the 
        order the modules are listed in spy.properties:</font></p>
      <blockquote>
        <p>#################################################################<br>
          # MODULES #<br>
          # #<br>
          # Modules provide the P6Spy functionality. If a module, such #<br>
          # as module_log is commented out, that functionality will not #<br>
          # be available. If it is not commented out (if it is active), #<br>
          # the functionality will be active. #<br>
          # #<br>
          # Values set in Modules cannot be reloaded using the #<br>
          # reloadproperties variable. Once they are loaded, they remain #<br>
          # in memory until the application is restarted. #<br>
          # #<br>
          #################################################################</p>
        <p>module_cache=com.p6spy.engine.outage.P6CacheDriver<br>
          #module_log=com.p6spy.engine.logging.P6LogSpyDriver</p>
        </blockquote>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In this case 
        P6CacheDriver is listed first. This is probably the behavior you want, 
        since P6Cache will process the request first and only pass through to 
        P6Log when an actual database query is executed. For example, if you cached 
        the statement &quot;select ? from employee&quot;, the first time you accessed 
        that query you would see an entry in P6Log. However, every time after 
        that there would be no statement, since P6Cache is intercepting the statement 
        before it goes to the database.</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">If you want 
        to see everything that is happening, you can reverse the order and list 
        P6LogSpyDriver first. This will cause every statement, cached or not, 
        to be logged.</font></p>
      <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong>Known 
        Limitations/Issues</strong></font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">P6Cache does 
        not support caching of Blobs, Clobs, Arrays, Binary Stream, Unicode Stream, 
        get Timestamp/time with calendar (standard get time/timestamp is supported), 
        big decimal with scale (standard get big decimal is supported), get date 
        with calendar (standard get date is supported), and get ref. These may 
        be supported at a later time.</font></p>
      <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">One bug that 
        has been observed is that some databases that do not support long VARCHAR 
        values and instead recommend using BLOBs (MySQL for example) may allow 
        you to cheat and perform a getString() on the blob column and the database 
        driver will make the automatic conversion when you invoke getString(). 
        P6Cache will not prevent that call, since it only blocks getBlob calls 
        on cached data, however, P6Cache also does not have this automatic conversion 
        capability built-in. This means if you cache a BLOB column and invoke 
        getString() P6Cache will not return the expected String, but rather the 
        hashCode of the BLOB.</font></p>
      <!-- #EndEditable --> </td>
  </tr>
</table>
<br>
<table width="100%" border="0">
  <tr> 
    <td width="11%"><a href="http://www.p6spy.com" target="_parent"><img src="images/p6spy_com.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="index.htm" target="bottomFrame"><img src="images/index.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="install.htm" target="bottomFrame"><img src="images/install.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="p6log.htm" target="bottomFrame"><img src="images/p6log.gif" width="110" height="20" border="0"></a></td>
    <td width="11%"><a href="p6outage.htm" target="bottomFrame"><img src="images/p6outage.gif" width="110" height="20" border="0"></a></td>
    <td width="7%"><a href="p6cache.htm" target="bottomFrame"><img src="images/p6cache.gif" width="110" height="20" border="0"></a></td>
    <td width="38%">&nbsp;</td>
  </tr>
</table>
</body>
<!-- #EndTemplate --></html>
